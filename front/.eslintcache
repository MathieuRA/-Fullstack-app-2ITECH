[{"/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/index.jsx":"1","/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/App.jsx":"2","/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/utils/editModal.jsx":"3","/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/utils/notification.jsx":"4","/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/component/projects/project.jsx":"5"},{"size":500,"mtime":1607704116653,"results":"6","hashOfConfig":"7"},{"size":1079,"mtime":1607792146125,"results":"8","hashOfConfig":"7"},{"size":2709,"mtime":1607781096529,"results":"9","hashOfConfig":"7"},{"size":117,"mtime":1607781124899,"results":"10","hashOfConfig":"7"},{"size":7462,"mtime":1607793003710,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ku5nka",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/index.jsx",[],["24","25"],"/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/App.jsx",[],"/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/utils/editModal.jsx",["26"],"import React from 'react'\n\nimport { map, isEqual } from 'lodash'\n\nexport default class EditModal extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isEditing: false,\n      user: {\n        id: this.props.id,\n      },\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState((prevState) => ({\n      user: {\n        ...this.props.contents,\n        ...prevState.user,\n      },\n    }))\n  }\n\n  componentDidUpdate = (prevState) => {\n    if (isEqual(prevState, this.state)) {\n      return\n    }\n  }\n  toogleEditing = () => {\n    this.setState((prevState) => ({\n      isEditing: !prevState.isEditing,\n    }))\n  }\n\n  _editField = (e, key) => {\n    switch (key) {\n      case 'firstname':\n        this.setState((prevState) => ({\n          user: {\n            ...prevState.user,\n            firstname: e.target.value,\n          },\n        }))\n        break\n      case 'lastname':\n        this.setState((prevState) => ({\n          user: {\n            ...prevState.user,\n            firstname: e.target.value,\n          },\n        }))\n        break\n      case 'job':\n        this.setState((prevState) => ({\n          user: {\n            ...prevState.user,\n            firstname: e.target.value,\n          },\n        }))\n        break\n    }\n  }\n\n  render() {\n    const {\n      contents,\n      handleEdit,\n      hasEditedUser,\n    } = this.props\n\n    let i = 0\n\n    return (\n      <div onDoubleClick={this.toogleEditing}>\n        {map(contents, (content) => {\n          const key = Object.keys(contents)[i]\n          if (\n            // hide useless change without delete them of the object\n            key === '__v' ||\n            key === '_id'\n          ) {\n            i++\n            return\n          }\n          i++\n\n          return (\n            <>\n              <FormField\n                key={i}\n                content={content}\n                isEditing={this.state.isEditing}\n                onChange={(e) => this._editField(e, key)}\n              />\n            </>\n          )\n        })}\n        <small>\n          Doublie clique pour{' '}\n          {this.state.isEditing ? (\n            <span>annuler</span>\n          ) : (\n            <span>modifier</span>\n          )}\n        </small>\n        {this.state.isEditing && (\n          <button\n            onClick={() =>\n              handleEdit(\n                this.state,\n                hasEditedUser,\n                this.toogleEditing\n              )\n            }>\n            Modifier\n          </button>\n        )}\n      </div>\n    )\n  }\n}\n\nconst FormField = ({ content, isEditing, onChange }) => {\n  return isEditing ? (\n    <input placeholder={content} onChange={onChange} />\n  ) : (\n    <p>{content}</p>\n  )\n}\n","/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/utils/notification.jsx",["27"],"/home/mathieu/Documents/2I Tech/Node/fullstack/front/src/component/projects/project.jsx",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":37,"column":5,"nodeType":"34","messageId":"35","endLine":62,"endColumn":6},{"ruleId":"28","severity":1,"message":"36","line":1,"column":16,"nodeType":"37","messageId":"38","endLine":1,"endColumn":28},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Read-only global 'Notification' should not be modified.","Identifier","nativeReassign","no-global-assign","no-unsafe-negation"]